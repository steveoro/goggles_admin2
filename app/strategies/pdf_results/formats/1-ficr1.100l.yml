#
# = Layout format definition for PdfResults::FormatParser
#
# (100m | 200m, with *all* lap timings)
#
# Spawn of 1-ficr1.100m, it's a "long misaligned spread" version, where 100+m results are rendered
# on a 5x text row output for each result row like this:
#
# ---8<---
# Pos. Nominativo                                 Crs. Naz.           50 m           100 m     150 m      200 m          Arrivo       Pti Cat
#       Società                                        Anno                                                              Master       Pti SC
#
#                                                                                    M25 Master Femmine 25 - 29
#
#                                                                     31.71         1:07.43    1:46.17   2:24.97         2:24.97
#    4 CROSTOLAX JUNIPERT                           5    ITA
#                                                                                    35.72      38.74      38.80
#       SBROMBALLATI ASD                                1977
#                                                                                                                         824,51                5
# ---8<---
#
# Note that there's also an older version of this kind of layout that does not yield the
# team name so it's unprocessable (becase we need the team name to create the MIR row).
#
1-ficr1.100l:
  - name: header
    # Index is page-relative:
    at_fixed_row: 0
    # Repeat (at_fixed_row, each page)
    repeat: true
    rows:
      # "header" row #0
      - fields:
        - name: edition
          required: false
          format: "^\\s{20,}(\\d{1,2}|[IVXLCM]+).{1,2}?\\s+"
          pop_out: false
        - name: meeting_name
          format: "^\\s{20,}(?>\\d{1,2}|[IVXLCM]+)?.{1,2}?\\s+(.+)$"
          pop_out: false

      # "header" row #1
      - fields:
        - name: meeting_date
          # Extract the date first, popping it out so that the remainder can be treated as the meeting place:
          format: "[,;\\/\\s](?>\\d{1,2}\\s?(?>-|\\.\\.)\\s?)?(\\d{2}[\\/\\-\\s](?>\\d{2}|\\w{3,})[\\/\\-\\s](?>\\d{4}|\\d{2}))"
          # pop_out: false
        - name: meeting_place
          # Support long place names like "Centro Federale di Ostia (RM)" or "Reggio nell'Emilia"
          # More generic: (see ficr2)
          format: "^\\s*(\\D{2,}),\\s*"

      # Optional empty row #3
      - name: hdr_separator
        required: false
        format: "^$"

  - name: event
    # Repeat each page
    repeat: true
    parent: header
    rows:
      - fields:
        - name: event_length
          lambda: strip
          format: "\\s*(100|200)m?\\s+"
        - name: event_type
          lambda: strip
          format: "\\s*(?>m\\s)?((\\w+\\s?){1,2})\\sMaster\\sMisti\\b"

      - fields:
        - name: event_sub_hdr
          lambda: strip
          format: "Riepilogo|Serie\\s\\d{2}"

  # Data columns header
  - name: results_hdr
    repeat: true
    rows:
      - name: results_hdr1
        format: "\\s?Pos.\\s+Nominativo\\s+Crs\\.?\\s+Naz\\.?\\s+50\\sm(?>\\s+100 m)?(?>\\s+150 m)?(?>\\s+200 m)?\\s+Arrivo\\s+Pti?\\s+Cat"
      - name: results_hdr2
        format: "\\s?Società\\s+Anno\\s+(FINA|Master)\\s+Pti?\\s+S\\.?C\\.?"

  # Optional row before category
  - name: cat_spacer
    parent: results_hdr
    required: false
    format: "^$"

  - name: category
    repeat: true
    parent: event
    rows:
      # Another optional empty row (in older files)
      - name: cat_spacer2
        required: false
        format: "^$"

      - name: cat_title
        # Original:
        # format: "\\s*([UAM]\\d{2}\\s(?>Under|Master)?\\s?(?>Femmine|Maschi)(?>\\s(?>\\d{2}\\s[-–]\\s\\d{2}))?)"
        # Examples: "A20 Femmine", "M25 Master Femmine 25 -29", " » segue M40 Master Femmine 40 - 44"
        format: "^(?>\\s*»\\ssegue\\s|\\s{10,})([UAM]\\d{2}\\s(?>Under|Master)?\\s?(?>Femmine|Maschi))"
      # Optional empty row
      - name: cat_separator1
        required: false
        format: "^$"

  - name: results
    repeat: true
    parent: category
    rows:
      - name: results0
        # DSQ results usually won't have the lap row with the timings:
        required: false
        fields:
          # - name: spacer
          #   format: "^\\s{64,}(?!\\s*\\D+)"
          #   pop_out: false
          - name: lap50
            format: "\\s{50,}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 66
            # token_end: 81
            # Alternative w/o margins:
            # format: "^\\s{25,}((?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            required: false
          - name: lap100
            format: "\\s{50,}(?>(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){1}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 81
            # token_end: 92
            # Alternative w/o margins:
            # format: "^\\s{25,}(?>(?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){1}((?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            required: false
          - name: lap150
            format: "\\s{50,}(?>(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){2}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 92
            # token_end: 108
            # Alternative w/o margins:
            # format: "^\\s{25,}(?>(?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){2}((?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            required: false
          - name: lap200
            format: "\\s{50,}(?>(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){3}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 109
            # token_end: 118
            # Alternative w/o margins:
            # format: "^\\s{25,}(?>(?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){3}((?>\\d{1,2}[':.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            required: false

          - name: timing
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})$"
            # Use last lap as timing when the column is totally missing:
            token_start: 109
            pop_out: false
            required: false

      - name: results1
        fields:
          - name: rank
            format: "\\s*(\\d{1,2}|SQ|RT|NP|ES)\\s+"
            pop_out: false
          - name: swimmer_name
            # Original:
            # format: "\\s+(\\D+(?>['`\\-\\.\\s]\\s?\\D+){1,4})\\s+"
            # token_end: 31
            format: "^\\s*(?>\\d{1,2}|SQ|RT|NP|ES)\\s+(\\D{3,35})\\s{1,}\\d{1,2}\\s+"
            pop_out: false
          - name: lane_num
            # Original:
            # format: "\\s*(\\d{1,2})\\s*"
            # # Column alignment may vary (swimmer_name range can overlap safely with this due to its format):
            # token_start: 25
            # token_end: 52
            format: "^\\s*(?>\\d{1,2}|SQ|RT|NP|ES)\\s+\\D{3,35}\\s{1,}(\\d{1,2})\\s+"
            pop_out: false
          - name: nation
            # Original:
            # format: "\\s*(?>\\d{1,2})\\s*(\\w{2,3})\\b"
            # token_start: 25
            # token_end: 62
            format: "^\\s*(?>\\d{1,2}|SQ|RT|NP|ES)\\s+\\D{3,35}\\s{1,}\\d{1,2}\\s{1,}(\\w{3})\\b"
            pop_out: false

      - name: results2
        # ""RT" or "Retired" result rows usually won't even have the disqualify row:
        required: false
        fields:
          - name: spacer
            format: "\\s{80,}"
            pop_out: false
          - name: delta100
            # may/may not have brackets:
            format: "\\s{70,}\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            # token_start: 82
            # token_end: 93
            required: false
          - name: delta150
            format: "\\s{70,}(?>\\(?(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\)?\\s+){1}\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            # token_start: 93
            # token_end: 103
            required: false
          - name: delta200
            format: "\\s{70,}(?>\\(?(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\)?\\s+){2}\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            # token_start: 103
            # token_end: 118
            required: false
          - name: disqualify_type
            format: "^(?!\\s+(Orario Ufficializzazione|\\d{1,2}|www.ficr.it|corsie|Pagina))\\s+(\\D+\\s?)+\\b"
            token_start: 115
            required: false

      - name: results3
        fields:
          - name: team_name
            format: "^\\s{3,8}(([\\w\\d\\-&%'`]+.\\s?)+)"
            token_end: 43
            # Support also incomplete results without team name: (may be fetched later by MacroSolver)
            required: false
            pop_out: false
          - name: year_of_birth
            format: "\\s*(\\d{4})\\b"
            pop_out: false
            token_start: 51
            token_end: 64

      - name: results4
        # This will match any empty row if the fields are not found:
        optional_if_empty: true
        # This will make the row not to fail if missing at all
        # => row #5 can be there, or be empty (no fields at all), or have either 1 or 2 matching fields
        required: false
        fields:
          - name: std_score
            format: "^\\s{114,}(\\d?[,.]?\\d{1,4}[,.]\\d{1,2})(?>\\s+\\d+)?"
            pop_out: false
            # U25 / A20 do not score:
            required: false
          - name: meeting_score
            format: "^\\s{114,}(?>\\d?[,.]?\\d{1,4}[,.]\\d{1,2})?\\s{10,}(\\d+)\\b"
            pop_out: false
            # U25 / A20 do not score:
            required: false

  # Alternate result sub-section (optional, 4x rows):
  - name: results_alt
    # Alternative section name for which this one will "stand-in" ONLY when validated
    alternative_of: results
    required: false
    repeat: true
    parent: category
    rows:
      - name: results0
        # DSQ results usually won't have the lap row with the timings:
        required: false
        fields:
          # - name: spacer
          #   format: "^\\s{64,}"
          #   pop_out: false
          - name: lap50
            format: "\\s{50,}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 66
            # token_end: 81
            required: false
          - name: lap100
            format: "\\s{50,}(?>(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){1}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 81
            # token_end: 92
            required: false
          - name: lap150
            format: "\\s{50,}(?>(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){2}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 92
            # token_end: 108
            required: false
          - name: lap200
            format: "\\s{50,}(?>(?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2}\\s+){3}((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*"
            pop_out: false
            # Positional:
            # format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            # token_start: 109
            # token_end: 118
            required: false

          - name: timing
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})$"
            token_start: 118
            pop_out: false
            required: false

      - name: results1
        fields:
          - name: rank
            format: "\\s*(\\d{1,2}|SQ|RT|NP|ES)\\s+"
            pop_out: false
          - name: swimmer_name
            # Original:
            # format: "\\s+(\\D+(?>['`\\-\\.\\s]\\s?\\D+){1,4})\\s+"
            # token_end: 31
            format: "^\\s*(?>\\d{1,2}|SQ|RT|NP|ES)\\s+(\\D{3,35})\\s{1,}\\d?\\s+"
            pop_out: false
          - name: lane_num
            # Original:
            # format: "\\s*(\\d{1,2})\\s*"
            # # Column alignment may vary (swimmer_name range can overlap safely with this due to its format):
            # token_start: 25
            # token_end: 52
            format: "^\\s*(?>\\d{1,2}|SQ|RT|NP|ES)\\s+\\D{3,35}\\s{1,}(\\d)\\s+"
            pop_out: false
          - name: nation
            # Original:
            # format: "\\s*(?>\\d{1,2})\\s*(\\w{2,3})\\b"
            # token_start: 25
            # token_end: 62
            format: "^\\s*(?>\\d{1,2}|SQ|RT|NP|ES)\\s+\\D{3,35}\\s{1,}\\d\\s{1,}(\\w{3})\\b"
            pop_out: false

      - name: results2
        fields:
          - name: team_name
            format: "^\\s{3,8}(([\\w\\d\\-&%'`]+.\\s?)+)"
            token_end: 43
            # Support also incomplete results without team name: (may be fetched later by MacroSolver)
            required: false
            pop_out: false
          - name: year_of_birth
            format: "\\s*(\\d{4})\\b"
            pop_out: false
            token_start: 51
            token_end: 64

      - name: results3
        # This will match any empty row if the fields are not found:
        optional_if_empty: true
        # This will make the row not to fail if missing at all
        # => row #5 can be there, or be empty (no fields at all), or have either 1 or 2 matching fields
        required: false
        fields:
          - name: std_score
            format: "^\\s{114,}(\\d?[,.]?\\d{1,4}[,.]\\d{1,2})(?>\\s+\\d+)?"
            pop_out: false
            # U25 / A20 do not score:
            required: false
          - name: meeting_score
            format: "^\\s{114,}(?>\\d?[,.]?\\d{1,4}[,.]\\d{1,2})?\\s{10,}(\\d+)\\b"
            pop_out: false
            # U25 / A20 do not score:
            required: false

  - name: disqualified
    parent: results
    required: false
    lambda: strip
    format: "\\s*Non Classificati\\b"

  - name: empty_row
    parent: event
    required: false
    format: "^$"

  - name: publish_time
    parent: event
    required: false
    lambda: strip
    format: "Orario Ufficializzazione"

  - name: footer_title
    parent: event
    repeat: true
    rows:
      - name: pre_footer_spacer1
        required: false
        format: "^$"
      - name: page_count
        starts_with: Elaborazione dati a cura della Federazione Italiana Cronometristi - www.ficr.it
        fields:
          - name: pool_type
            required: false
            format: "\\s+(\\d{1,2} corsie \\d{2}m)\\s+"
          - name: page_num
            format: "\\s+Pagina\\s(\\d{1,2})\\sdi\\s\\d{1,2}"

  # End-Of-Page context
  - name: footer
    parent: footer_title
    eop: true
    row_span: 4
    repeat: true
    fields:
      # Actual last-line context marker (page should end after this token)
      - name: page_delimiter
        format: "nuoto.ficr.it\\b"
