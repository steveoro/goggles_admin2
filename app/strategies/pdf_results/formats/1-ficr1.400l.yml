#
# = Layout format definition for PdfResults::FormatParser
#
# (400m, with laps for 50m, 150m + all other 100m lap timings)
#
# Spawn of 1-ficr1.1500m, where 100+m results are rendered on a 5x text row output for each result row
# but with slightly different columns placement, like this:
#
# ---8<---
# Pos. Nominativo                                 Crs. Naz.           50 m           100 m      150 m      200 m     300 m     400 m     Arrivo       Pti Cat
#       Società                                        Anno                                                                              Master       Pti SC
#
#                                                                                    M50 Master Femmine 50 - 54
#
#                                                                     43.57         1:30.91     2:19.89   3:08.18    4:45.70   6:22.30   6:22.30
#    1 ROSSOLINI ROSSANA                            2    ITA
#                                                                                    47.34       48.98      48.29    1:37.52   1:36.60
#       DUBALLE ATOMICHE ASD                            1971
#                                                                                                                                         749,59                6
# ---8<---
#
# ...Or like this:
#
# ---8<---
# Pos. Nominativo                                 Crs. Naz.           50 m           100 m      150 m      200 m     300 m      400 m                                       Arrivo       Pti Cat
#       Società                                        Anno                                                                                                                 Master       Pti SC
#
#                                                                                    M60 Master Femmine 60 - 64
#
#                                                                     51.46         1:46.01     2:40.67   3:35.97    5:23.97   7:10.31                                      7:10.31
#    1 SCRONDOLA MARUGA                             2    ITA
#                                                                                    54.55       54.66      55.30    1:48.00    1:46.34
#       SIAMOSTANCHI SSD                                1960
#                                                                                                                                                                            742,25                6
# ---8<---
#
# Supports also a 4x row result, without the delta row (can happen in case of technical difficulties).
#
1-ficr1.400l:
  - name: header
    # Index is page-relative:
    at_fixed_row: 0
    # Repeat (at_fixed_row, each page)
    repeat: true
    rows:
      # "header" row #0
      - fields:
        - name: edition
          required: false
          format: "^\\s{20,}(\\d{1,2}|[IVXLCM]+).{1,2}?\\s+"
          pop_out: false
        - name: meeting_name
          format: "^\\s{20,}(?>\\d{1,2}|[IVXLCM]+)?.{1,2}?\\s+(.+)$"
          pop_out: false

      # "header" row #1
      - fields:
        - name: meeting_place
          # Support long place names like "Centro Federale di Ostia (RM)" or "Reggio nell'Emilia"
          # format: "^\\s*(.{2,}(?>\\s\\(\\w\\w\\)))?,\\s*"
          # More generic: (see ficr2)
          format: "^\\s*(\\D{2,}),\\s*"
        - name: meeting_date
          # Support month names too: dd(-/)mm(-/)yy(yy), dd MMM(...) yy(yy)
          format: "^\\s*.{2,}(?>\\s\\(\\w\\w\\))?,\\s*(\\d{2}([-\/]\\d{2}[-\/]\\d{2,4}|\\s\\w{3,}\\s\\d{2,4}))\\b"

      # Optional empty row #3
      - name: hdr_separator
        required: false
        format: "^$"

  - name: event
    # Repeat each page
    repeat: true
    parent: header
    rows:
      - fields:
        - name: event_length
          lambda: strip
          format: "\\s*(\\d{2,4})m?\\s+"
        - name: event_type
          lambda: strip
          format: "\\s*(?>m\\s)?((\\w+\\s?){1,2})\\sMaster\\sMisti\\b"

      - fields:
        - name: event_sub_hdr
          lambda: strip
          format: "Riepilogo|Serie\\s\\d{2}"

  # Data columns header
  - name: results_hdr
    repeat: true
    rows:
      - name: results_hdr1
        format: "\\s?Pos.\\s+Nominativo\\s+Crs.?\\s+Naz.?\\s+50 m\\s+100 m\\s+150 m\\s+200 m\\s+300 m\\s+400 m\\s+Arrivo\\s+Pti?\\s+Cat"
      - name: results_hdr2
        format: "\\s?Società\\s+Anno\\s+\\s+(FINA|Master)\\s+Pti?\\s+S\\.?C\\.?"

  # Optional row before category
  - name: cat_spacer
    parent: results_hdr
    required: false
    format: "^$"

  - name: category
    repeat: true
    parent: event
    rows:
      # Another optional empty row (in older files)
      - name: cat_spacer2
        required: false
        format: "^$"

      - name: cat_title
        format: "\\s*([UAM]\\d{2}\\s(?>Under|Master)?\\s?(?>Femmine|Maschi)(?>\\s(?>\\d{2}\\s-\\s\\d{2}))?)[\\b\\n]?"
      # Optional empty row
      - name: cat_separator1
        required: false
        format: "^$"

  - name: results
    repeat: true
    parent: category
    rows:
      - name: results0
        # DSQ results usually won't have the lap row with the timings:
        required: false
        fields:
          - name: spacer
            format: "^\\s{64,}"
            pop_out: false
          - name: lap50
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 66
            token_end: 78
            required: false
          - name: lap100
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 80
            token_end: 92
            required: false
          - name: lap150
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 92
            token_end: 104
            required: false
          - name: lap200
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 104
            token_end: 114
            required: false

          - name: lap300
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 114
            token_end: 124
            required: false
          - name: lap400
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 124
            token_end: 134
            required: false

          - name: timing
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})$"
            # Use last lap as timing when the column is totally missing:
            token_start: 124
            pop_out: false
            required: false

      - name: results1
        fields:
          - name: rank
            format: "\\s*(\\d{1,2}|SQ|RT|NP|ES)\\s+"
            pop_out: false
          - name: swimmer_name
            format: "\\s+(\\D{3,30})\\s+"
            pop_out: false
            token_end: 32
          - name: lane_num
            format: "\\s*(\\d{1,2})\\s*"
            pop_out: false
            # Column alignment may vary (swimmer_name range can overlap safely with this due to its format):
            token_start: 25
            token_end: 54
          - name: nation
            format: "\\s*(\\w{2,3})\\b"
            pop_out: false
            token_start: 53
            token_end: 62

      - name: results2
        # ""RT" or "Retired" result rows usually won't even have the disqualify row:
        required: false
        fields:
          - name: spacer
            format: "\\s{80,}"
            pop_out: false
          - name: delta100
            # may/may not have brackets:
            format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 82
            token_end: 92
            required: false
          - name: delta150
            format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 92
            token_end: 102
            required: false
          - name: delta200
            format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 102
            token_end: 113
            required: false

          - name: delta300
            format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 113
            token_end: 123
            required: false
          - name: delta400
            format: "\\s*\\(?((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 123
            token_end: 134
            required: false

          - name: disqualify_type
            format: "^(?!\\s+(Orario Ufficializzazione|\\d{1,2}|www.ficr.it|corsie|Pagina))\\s+(\\D+\\s?)+\\b"
            token_start: 134
            required: false

      - name: results3
        fields:
          - name: team_name
            format: "^\\s{3,8}(([\\w\\d\\-&%'`]+.\\s?)+)"
            token_end: 43
            pop_out: false
          - name: year_of_birth
            format: "\\s*(\\d{4})\\b"
            pop_out: false
            token_start: 51
            token_end: 64

      - name: results4
        # This will match any empty row if the fields are not found:
        optional_if_empty: true
        # This will make the row not to fail if missing at all
        # => row #5 can be there, or be empty (no fields at all), or have either 1 or 2 matching fields
        required: false
        fields:
          - name: std_score
            format: "^\\s{130,}(\\d?[,.]?\\d{1,4}[,.]\\d{1,2})(?>\\s+\\d+)?"
            pop_out: false
            # U25 / A20 do not score:
            required: false
          - name: meeting_score
            format: "^\\s{130,}(?>\\d?[,.]?\\d{1,4}[,.]\\d{1,2})?\\s{10,}(\\d+)\\b"
            pop_out: false
            # U25 / A20 do not score:
            required: false

  # Alternate result sub-section (optional, 4x rows):
  - name: results_alt
    # Alternative section name for which this one will "stand-in" ONLY when validated
    alternative_of: results
    required: false
    repeat: true
    parent: category
    rows:
      - name: results0
        # DSQ results usually won't have the lap row with the timings:
        required: false
        fields:
          - name: spacer
            format: "^\\s{64,}(?!\\s*\\D+)"
            pop_out: false
          - name: lap50
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 66
            token_end: 78
            required: false
          - name: lap100
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 80
            token_end: 92
            required: false
          - name: lap150
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 92
            token_end: 104
            required: false
          - name: lap200
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 104
            token_end: 114
            required: false

          - name: lap300
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 114
            token_end: 124
            required: false
          - name: lap400
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            pop_out: false
            token_start: 124
            token_end: 134
            required: false

          - name: timing
            format: "\\s*((?>\\d{1,2}[':\\.])?\\d{1,2}[\":\\.]\\d{1,2})\\s*\\b"
            token_start: 134
            pop_out: false
            required: false

      - name: results1
        fields:
          - name: rank
            format: "\\s*(\\d{1,2}|SQ|RT|NP|ES)\\s+"
            pop_out: false
          - name: swimmer_name
            format: "\\s+(\\D{3,30})\\s+"
            pop_out: false
            token_end: 32
          - name: lane_num
            format: "\\s*(\\d{1,2})\\s*"
            pop_out: false
            # Column alignment may vary (swimmer_name range can overlap safely with this due to its format):
            token_start: 25
            token_end: 52
          - name: nation
            format: "\\s*(\\w{2,3})\\b"
            pop_out: false
            token_start: 53
            token_end: 62

      - name: results2
        fields:
          - name: team_name
            format: "^\\s{3,8}(([\\w\\d\\-&%'`]+.\\s?)+)"
            token_end: 43
            pop_out: false
          - name: year_of_birth
            format: "\\s*(\\d{4})\\b"
            pop_out: false
            token_start: 51
            token_end: 64

      - name: results3
        # This will match any empty row if the fields are not found:
        optional_if_empty: true
        # This will make the row not to fail if missing at all
        # => row #5 can be there, or be empty (no fields at all), or have either 1 or 2 matching fields
        required: false
        fields:
          - name: std_score
            format: "^\\s{130,}(\\d?[,.]?\\d{1,4}[,.]\\d{1,2})(?>\\s+\\d+)?"
            pop_out: false
            # U25 / A20 do not score:
            required: false
          - name: meeting_score
            format: "^\\s{130,}(?>\\d?[,.]?\\d{1,4}[,.]\\d{1,2})?\\s{10,}(\\d+)\\b"
            pop_out: false
            # U25 / A20 do not score:
            required: false

  - name: disqualified
    parent: results
    required: false
    lambda: strip
    format: "\\s*Non Classificati\\b"

  - name: empty_row
    parent: event
    required: false
    format: "^$"

  - name: publish_time
    parent: event
    required: false
    lambda: strip
    format: "Orario Ufficializzazione"

  - name: footer_title
    parent: event
    repeat: true
    rows:
      - name: pre_footer_spacer1
        required: false
        format: "^$"
      - name: page_count
        starts_with: Elaborazione dati a cura della Federazione Italiana Cronometristi - www.ficr.it
        fields:
          - name: pool_type
            required: false
            format: "\\s+(\\d{1,2} corsie \\d{2}m)\\s+"
          - name: page_num
            format: "\\s+Pagina\\s(\\d{1,2})\\sdi\\s\\d{1,2}"

  # End-Of-Page context
  # - name: footer
  #   parent: event
  #   # The 'eop' key implies that this context will be searched <row_span> lines before the end of page.
  #   # This also implies that the file must also be parsed in pages, otherwise the recognition will fail.
  #   # (DO NOT use eop: true when extracting the whole file, unless when processing batches of pages)
  #   eop: true
  #   row_span: 4
  #   repeat: true
  #   fields:
  #     # Actual last-line context marker (page should end after this token)
  #     - name: page_delimiter
  #       format: "\\s*https?://nuoto.ficr.it/?"

  # Alternative, simpler EOP:
  - name: footer
    parent: footer_title
    eop: true
    repeat: true
    rows:
      - name: footer1
        required: false
        format: "risultati su"
      - name: footer_end
        format: "nuoto.ficr.it\\b"
