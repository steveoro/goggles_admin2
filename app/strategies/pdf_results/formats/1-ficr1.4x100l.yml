#
# = Layout format definition for PdfResults::FormatParser
#
# "4x100 no swimmer names, with 50 & 150 50m-laps only"
#
1-ficr1.4x100l:
  - name: header
    at_fixed_row: 0
    # Repeat each page:
    repeat: true
    rows:
      # "header" row-0, abs. row #0
      - fields:
        - name: edition
          lambda: strip
          format: "\\s*(\\d{1,2}|[IVXLCM]+).{1,2}?\\s+"
        - name: meeting_name
          lambda: strip
          format: "(?>\\s*[°^*oa']?)\\s+([\"“`']?.+[\"“`'\\b]?)"

      # "header" row-1, abs. row #1:
      - fields:
        - name: meeting_place
          lambda: strip
          # Support long place names like "Centro Federale di Ostia" or "Reggio nell'Emilia"
          format: "\\s*((\\w{1,}['\\s]?)+),\\s*"
        - name: meeting_date
          lambda: strip
          # Support month names too: dd(-/)mm(-/)yy(yy), dd MMM(...) yy(yy)
          format: "\\s*(\\d{2}([-\/]\\d{2}[-\/]\\d{2,4}|\\s\\w{3,}\\s\\d{2,4}))\\b"

  - name: sub_title
    at_fixed_row: 2
    repeat: true
    parent: header
    rows:
      # Optional empty row
      - name: sub_separator1
        required: false
        format: "^$"
      - name: sub_title1
        required: false
        format: "\\s+(Risultati)"

  - name: event
    starts_at_row: 2
    ends_at_row: 6
    repeat: true
    parent: header
    rows:
      - fields:
        - name: event_length
          lambda: strip
          format: "\\s*([48]X\\d{2,4})m?\\s+"
        - name: event_type
          lambda: strip
          format: "\\s*(?>m\\s)?(((\\w+\\s?){1,2})\\sMaster\\s(Misti|Masch|Femmin))"

      - name: event_sub_hdr
        lambda: strip
        format: "Riepilogo|Serie\\s\\d{2}"

  # Data columns header
  - name: results_hdr
    starts_at_row: 4
    ends_at_row: 7
    repeat: true
    rows:
      - name: results_hdr1
        format: "\\s?Pos.\\s+Nominativo\\s+Crs.?\\s+Naz.?\\s+50 m\\s+100 m\\s+150 m\\s+200 m(\\s+300 m)?(\\s+400 m)?\\s+Arrivo\\s+Pti?\\s+Cat"
      - name: results_hdr2
        format: "\\s?Società\\s+Anno\\s+(FINA|Master)\\s+Pti?\\s+S\\.?C\\.?"
      # Optional empty row
      - name: esults_hdr_separator
        format: "^$"
        required: false

  - name: rel_category
    starts_at_row: 6
    repeat: true
    required: false
    parent: event
    rows:
      - name: cat_title
        format: "\\s+((Under|Master)\\s(Misti|Femmin.*|Maschi)(\\s(\\d{2,3}\\s-\\s\\d{2,3}))?)\\b"
      # Optional empty row
      - name: cat_separator1
        format: "^$"
        required: false

  - name: rel_team
    repeat: true
    parent: event
    starts_at_row: 7
    rows:
      - name: rel_team0
        # DSQ results usually won't have the lap row with the timings:
        required: false
        fields:
          - name: spacer
            format: "^\\s{64,}"
            pop_out: false
          - name: lap50
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*"
            pop_out: false
            token_start: 66
            token_end: 78
            required: false
          - name: lap100
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*"
            pop_out: false
            token_start: 80
            token_end: 92
            required: false
          - name: lap150
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*"
            pop_out: false
            token_start: 92
            token_end: 103
            required: false
          - name: lap200
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*"
            pop_out: false
            token_start: 103
            token_end: 113
            required: false

          - name: lap300
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*"
            pop_out: false
            token_start: 113
            token_end: 123
            required: false
          - name: lap400
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*"
            pop_out: false
            token_start: 123
            token_end: 133
            required: false

          - name: timing
            format: "\\s*(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\s*\\b"
            token_start: 132
            pop_out: false
            required: false

      - name: rel_team1
        fields:
          - name: rank
            format: "\\s?(\\d{1,2}|SQ|RT|NP)\\s+"
            token_end: 7
            pop_out: false
            # Retired or "out-of-race" results may not even have the ranking placement:
            required: false
          - name: team_name
            format: "(?>\\s+\\d{1,2}|SQ|RT|NP)?\\s+(([\\w\\d\\-&%'`]+.\\s?)+)"
            token_end: 43
            pop_out: false
          - name: lane_num
            format: "\\s*(\\d{1,2})\\s*"
            pop_out: false
            token_start: 27
            token_end: 55
          - name: nation
            format: "\\s*(\\w{2,3})\\s*"
            pop_out: false
            token_start: 53
            token_end: 62
            required: false

      - name: rel_team2
        # This will match any empty row if the fields are not found:
        optional_if_empty: true
        # ""RT" or "Retired" result rows usually won't even have the disqualify row (but at least should have an empty row instead):
        required: false
        fields:
          - name: spacer
            format: "\\s{78,}"
            pop_out: false
          - name: delta100
            # may/may not have brackets:
            format: "\\s*\\(?(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 80
            token_end: 92
            required: false
          - name: delta150
            format: "\\s*\\(?(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 92
            token_end: 102
            required: false
          - name: delta200
            format: "\\s*\\(?(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 102
            token_end: 111
            required: false

          - name: delta300
            format: "\\s*\\(?(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 111
            token_end: 122
            required: false
          - name: delta400
            format: "\\s*\\(?(\\d{1,2}?[':.]?\\d{1,2}[\":.]\\d{1,2})\\)?\\s*"
            pop_out: false
            token_start: 122
            token_end: 134
            required: false

          - name: disqualify_type
            format: "^(?!\\s+(Orario Ufficializzazione|\\d{1,2}|www.ficr.it|corsie|Pagina))\\s+(\\D+\\s?)+\\b"
            token_start: 134
            required: false

      - name: rel_team3
        fields:
          # Ignore duplicated team name:
          - name: team_name_dup
            lambda: strip
            format: ".+"
            token_end: 41
            pop_out: false

      - name: rel_team4
        # Don't make the row fail when not found:
        required: false
        fields:
          - name: std_score
            format: "^\\s{130,}(\\d?[,.]?\\d{1,4}[,.]\\d{1,2})\\s?"
            pop_out: false
            # U25 / A20 do not score:
            required: false
          - name: meeting_score
            format: "^\\s{130,}(?>\\d?[,.]?\\d{1,4}[,.]\\d{1,2})?\\s{10,}(\\d+)\\b"
            pop_out: false
            # U25 / A20 do not score:
            required: false

  # Optional row including the "disqualified" message/reason
  # (When this is present, usually no relay swimmer rows are added)
  - name: rel_dsq
    required: false
    parent: rel_team
    fields:
      - name: disqualify_type
        # "All non-digit words from column 120 onward until the end of line"
        format: "^(?!\\s+(Orario Ufficializzazione|\\d{1,2}|www.ficr.it|corsie|Pagina))\\s{120,}(\\D+\\s?)+\\b"

  - name: disqualified
    parent: rel_team
    required: false
    lambda: strip
    format: "\\s*Non Classificati|Fuori gara\\b"

  - name: empty_row
    parent: event
    required: false
    format: "^$"

  - name: publish_time
    parent: event
    required: false
    lambda: strip
    format: "Orario Ufficializzazione"

  - name: footer_title
    parent: event
    repeat: true
    rows:
      - name: pre_footer_spacer1
        required: false
        format: "^$"
      - name: page_count
        starts_with: Elaborazione dati a cura della Federazione Italiana Cronometristi - www.ficr.it
        fields:
          - name: pool_type
            required: false
            format: "\\s+(\\d{1,2} corsie \\d{2}m)\\s+"
          - name: page_num
            format: "\\s+Pagina\\s(\\d{1,2})\\sdi\\s\\d{1,2}"

  # End-Of-Page context
  - name: footer
    parent: event
    # The 'eop' key implies that this context will be searched <row_span> lines before the end of page.
    # This also implies that the file must also be parsed in pages, otherwise the recognition will fail.
    # (DO NOT use eop: true when extracting the whole file, unless when processing batches of pages)
    eop: true
    row_span: 4
    repeat: true
    fields:
      # Actual last-line context marker (page should end after this token)
      - name: page_delimiter
        format: "\\s*https?://nuoto.ficr.it/?"
