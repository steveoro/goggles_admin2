-# frozen_string_literal: true

-# Phase 4 Events view
.container-fluid
  %h2 Data-Fix V2 â€¢ Step 4: Events (Phase 4)
  .mb-2
    = render(partial: 'data_fix/step_tabs', locals: { active_step: 4, file_path: @file_path })

  -# Phase Navigation buttons
  .d-flex.justify-content-between.my-2
    %div
      = link_to 'Use legacy (Step 4)', review_events_path(request.query_parameters.except(:phase4_v2)), class: 'btn btn-secondary'
    %div
      = link_to 'Proceed to Step 5 (Results)', review_results_path(request.query_parameters.merge(phase5_v2: 1)), class: 'btn btn-primary'
  -# Phase Metadata card
  = render(partial: 'data_fix/phase_metadata', locals: { phase_number: 4, metadata: @phase4_meta })

  -# Add Event Form
  .card.my-2
    .card-header
      %strong Add New Event
    .card-body.py-2
      = form_tag(data_fix_add_event_path, id: 'frm-add-event', method: :post, class: 'form-inline') do
        = hidden_field_tag 'file_path', @file_path
        - event_option_list = options_from_collection_for_select(GogglesDb::EventType.all_eventable, 'id', 'long_label')
        - session_option_list = []
        - @sessions&.each_with_index do |sess, idx|
          - label = "Session #{sess['session_order']}"
          - label += " - #{sess['description']}" if sess['description'].present?
          - session_option_list << [label, idx]
        .form-group.mr-2
          = label_tag 'event_type_id', 'Event Type', class: 'mr-1'
          = render(ComboBox::DbLookupComponent.new(nil, nil, 'event_type', required: true, values: event_option_list))
        .form-group.mr-2
          = label_tag 'session_index', 'Target Session', class: 'mr-1'
          = select_tag('session_index', options_for_select(session_option_list), class: 'custom-select')
        %button.btn.btn-sm.btn-success#btn-add-event{ type: 'submit',
          'aria-label' => 'Add event',
          data: { confirm: 'Add a new event?', disable_with: 'Please wait...' } }
          %i.fa.fa-plus
          Add Event

  -# Events grouped by session
  - if @all_events.empty?
    .alert.alert-info
      %em No events found. Rescan to rebuild phase4 file.
  - else
    - new_event_idx = params[:new_event_index]&.to_i
    
    -# Group events by session_order (stable identifier)
    - events_by_session = @all_events.group_by { |e| e['_session_order'] }
    - events_by_session.keys.sort.each do |session_order|
      - session_events = events_by_session[session_order]
      - session_data = @sessions.find { |s| s['session_order'] == session_order } || {}

      -# Session header (small, white/transparent)
      .card.mb-2.mt-3.bg-white.border-0
        .card-body.py-2
          .row.align-items-center
            .col-auto
              %strong.text-muted
                = "Session #{session_order}"
            - if session_data['scheduled_date'].present?
              .col-auto
                %small.text-muted
                  %i.fa.fa-calendar.mr-1
                  = session_data['scheduled_date']
            - if session_data['description'].present?
              .col-auto
                %small.text-muted
                  = session_data['description']
            .col-auto
              %small.badge.badge-secondary
                = "Order: #{session_order}"

      -# Events in this session (2-3 per row using Bootstrap columns)
      .row
        - session_events.each do |event|
          :ruby
            # Calculate global event index for unique IDs
            event_index = @all_events.index(event)
            local_event_index = event['_event_index']
            session_index = event['_session_index']
            
            is_new_event = new_event_idx.present? && new_event_idx == event_index
            event_id = event['id']
            has_match = event_id.present?
            card_bg = has_match ? 'bg-light' : 'bg-light-yellow'
            border_color = has_match ? 'border-secondary' : 'border-warning'
            border_width = 'border-2'
            event_key = event['key'] || "#{event['distance']}#{event['stroke']}"

          .col-lg-4.col-md-6.col-sm-12
            = render(partial: 'event_form_card',
                     locals: { file_path: @file_path, api_url: @api_url, event:, event_index:,
                               local_event_index:, session_index:, sessions: @sessions,
                               event_id:, has_match:, card_bg:, border_color:, border_width:,
                               event_key:, is_new_event:, event_types_payload: @event_types_payload,
                               existing_meeting_events: @existing_meeting_events })
