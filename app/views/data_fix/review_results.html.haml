= render(partial: 'modal_progress')
.wrapper-body
  .main-content
    %section.my-2#title-box
      = render(partial: 'data_fix_header', locals: { file_path: @file_path, retry_needed: @retry_needed })
    %section.my-2#review-events-tabs
      = render(partial: 'data_fix_tabs', locals: { active_tab: 'results', file_path: @file_path })

    %section.my-2#review-events
      - sorted_keys = @events_hash.sort { |a, b| a.last&.row&.event_order <=> b.last&.row&.event_order }.map(&:first)
      .container-fluid
        .row-fluid
          - sorted_keys.each_with_index do |event_key, ev_idx|
            :ruby
              event_entity = @events_hash[event_key]
              event = event_entity.row
              event_checker = Regexp.new(event_key, Regexp::IGNORECASE)
              prg_keys_filtered = @prgs_keys&.select { |prg_key| event_checker.match?(prg_key) }

            %div{ id: "event-card-#{ev_idx}" }
              .card.my-2
                %div{ id: "event-header-#{ev_idx}", class: event.id.present? ? 'bg-light' : 'bg-light-yellow' }
                  .row
                    .col-3
                      %h5.mb-0
                        .btn.m-1{ id: "edit-event-#{ev_idx}", data: { 'aria-expanded' => 'true',
                                  'aria-controls' => 'edit-event' } }
                          = event_key
                          &nbsp;
                          - if event.relay?
                            %i.fa.fa-users
                    .col-3.mt-2
                      %i.form-text.text-muted.bg-light-grey
                        %pre
                          ðŸ”‘ "#{event_key}"
                    .col.mt-2
                      = "=> #{event.decorate.short_label}"
                      - if event.id.present?
                        ID: #{event.id}
                        = event.valid? ? 'âœ…' : 'ðŸ”µ'
                      - else
                        ðŸ†•
                %div{ id: "event-panel-#{ev_idx}", 'aria-labelledby' => "event-header-#{ev_idx}",
                      'data-parent' => "#event-card-#{ev_idx}" }
                  .card-body.border-bottom.border-secondary
                    :ruby
                      row_keys = event.relay? ? @mrrs_keys : @mirs_keys
                      lap_keys = event.relay? ? @mrss_keys : @laps_keys
                    .row.text-center
                      - prg_keys_filtered.each_with_index do |prg_key, prg_idx|
                        :ruby
                          prg_entity = @prgs_hash[prg_key]
                          prg = prg_entity.row
                          prg_code = prg_key.split("#{event_key}-").last
                          prg_checker = Regexp.new(prg_key, Regexp::IGNORECASE)
                          result_sub_count = row_keys&.select { |row_key| prg_checker.match?(row_key) }&.count
                          lap_sub_count = lap_keys&.select { |lap_key| prg_checker.match?(lap_key) }&.count
                        .col-auto.border.pt-1.m-1
                          = prg_code
                          - if prg.id.present?
                            = prg.valid? ? 'âœ…' : 'ðŸ”µ'
                            %br/
                            %small
                              ID: #{prg.id}
                          - else
                            ðŸ†•
                          .row-fluid.mb-1
                            - collapse_dom_id = "res-panel-#{ev_idx}-#{prg_idx}"
                            %small
                              %pre
                                Tot: #{result_sub_count}
                                - if lap_sub_count.present?
                                  &nbsp;-&nbsp;Î”t: #{lap_sub_count}

                            = link_to(data_fix_result_details_path(prg_key: prg_key, file_path: @file_path,
                                      relay: event.relay?, target_dom_id: collapse_dom_id),
                                      id: "frm-#{collapse_dom_id}", method: :get, remote: true) do
                              = render(Switch::RotatingComponent.new(target_id: collapse_dom_id))

                            .collapse.my-2{ id: collapse_dom_id, 'aria-labelledby' => "#{collapse_dom_id}",
                                      'data-parent' => "#toggle-#{collapse_dom_id}" }
                              .text-center.my-4.py-4
                                .spinner-border.text-primary{ role: 'status' }

                    .row-fluid.mt-2
                      - result_count = row_keys&.select { |row_key| event_checker.match?(row_key) }&.count
                      %b Results tot.: #{result_count}

      - if @ts_keys.present?
        .container-fluid
          .row-fluid
            %b Ranking rows found: #{@ts_keys.count}


      .row-fluid.my-3.text-center
        = link_to(push_prepare_path(file_path: @file_path), method: :post,
                  class: 'btn btn-warning mb-1',
                  data: { toggle: 'tooltip', title: t('data_import.data_fix.btn_start_sql_batch_tooltip'),
                  confirm: t('data_import.data_fix.btn_start_sql_batch_confirm'),
                  disable_with: t('data_import.data_fix.btn_start_sql_batch_disable') }) do
          %span
            %i.fa.fa-bolt
            = t('data_import.data_fix.btn_start_sql_batch')
