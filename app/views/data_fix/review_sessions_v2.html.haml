-# frozen_string_literal: true

.container-fluid
  %h2 Data-Fix V2 â€¢ Step 1: Meeting & Sessions (Phase 1)

  .mb-2
    = render(partial: 'data_fix/step_tabs', locals: { active_step: 1, file_path: @file_path })

  - meeting_id = @phase1_data['id']
  - meeting_name = @phase1_data['name']
  - extra_info = [meeting_id, meeting_name].compact.join(': ').presence
  = render(partial: 'data_fix/phase_metadata', locals: { phase_number: 1, metadata: @phase1_meta, extra_info: extra_info })

  .card.mb-3#meeting-card
    .card-header
      %button.btn.btn-link.w-100.text-left{ type: 'button', data: { toggle: 'collapse', target: '#meeting-collapse' }, 'aria-expanded' => 'true', 'aria-controls' => 'meeting-collapse' }
        %strong Meeting
        %i.fa.fa-chevron-down.float-right
    .collapse.show#meeting-collapse
      .card-body
        %dl.row
          %dt.col-sm-3 Season ID
          %dd.col-sm-9= @phase1_data['season_id']

          %dt.col-sm-3 Name
          %dd.col-sm-9= @phase1_data['name']

          %dt.col-sm-3 URL
          %dd.col-sm-9= @phase1_data['meetingURL']

          %dt.col-sm-3 Date 1
          %dd.col-sm-9
            = [@phase1_data['dateDay1'], @phase1_data['dateMonth1'], @phase1_data['dateYear1']].compact.join(' ')

          %dt.col-sm-3 Date 2
          %dd.col-sm-9
            = [@phase1_data['dateDay2'], @phase1_data['dateMonth2'], @phase1_data['dateYear2']].compact.join(' ')

          %dt.col-sm-3 Venue
          %dd.col-sm-9= @phase1_data['venue1']

          %dt.col-sm-3 Address
          %dd.col-sm-9= @phase1_data['address1']

          %dt.col-sm-3 Pool Length
          %dd.col-sm-9= @phase1_data['poolLength']

        %hr/
        %h6 Edit meeting
        = form_tag(update_phase1_meeting_path, method: :patch, class: 'form', data: { controller: 'coded-name', 'coded-name-result-type-value' => 'code', 'coded-name-jwt-value' => current_user.jwt }) do
          = hidden_field_tag :file_path, @file_path

          -# Fuzzy matches dropdown + AutoCompleteComponent
          .form-row
            .form-group.col-md-6
              %label{ for: 'meeting_search' } Fuzzy Matches (from solver)
              - fuzzy_matches = @phase1_data['meeting_fuzzy_matches'] || []
              - src_dom = '#meeting_search'
              - target_dom = '#meeting_meeting_id'
              - onchange_event = "$('#{target_dom}').val($('#{src_dom}').val()); $('#{target_dom}').trigger('change')"
              = select_tag('meeting_search', options_for_select(fuzzy_matches.map { |m| [m['description'], m['id']] }, nil), include_blank: true, class: 'form-control form-control-sm', onchange: onchange_event)
              %small.form-text.text-muted Select to populate from existing meeting
            .form-group.col-md-6
              = render(AutoCompleteComponent.new(show_top_labels: true, base_dom_id: 'meeting', default_value: @phase1_data['id'], base_api_url: @api_url, detail_endpoint: 'meeting', base_name: 'meeting', label_column: 'description', search_endpoint: 'meetings', search_column: 'description', target3_dom_id: 'meeting_description', target3_column: 'description', target4_dom_id: 'meeting_code', target4_column: 'code', target5_dom_id: 'meeting_season_id', target5_column: 'season_id', target6_dom_id: 'meeting_header_year', target6_column: 'header_year', target7_dom_id: 'meeting_header_date', target7_column: 'header_date', target8_dom_id: 'meeting_edition', target8_column: 'edition', target9_dom_id: 'meeting_edition_type_id', target9_column: 'edition_type_id', target10_dom_id: 'meeting_timing_type_id', target10_column: 'timing_type_id', target11_dom_id: 'meeting_cancelled', target11_column: 'cancelled', target12_dom_id: 'meeting_confirmed', target12_column: 'confirmed', jwt: current_user.jwt))
              %small.form-text.text-muted Or search manually by description

          -# Basic fields: description, code
          .form-row
            .form-group.col-md-8
              %label{ for: 'meeting_description' } Description
              = text_field_tag :description, @phase1_data['name'], id: 'meeting_description', class: 'form-control form-control-sm', required: true, maxlength: 200, placeholder: 'Meeting description', data: { 'coded-name-target' => 'desc' }
            .form-group.col-md-4
              %label{ for: 'meeting_code' } Code
              = text_field_tag :code, @phase1_data['code'], id: 'meeting_code', class: 'form-control form-control-sm', placeholder: 'Auto-generated', data: { 'coded-name-target' => 'field' }

          -# Season, header_year, header_date
          .form-row
            .form-group.col-md-3
              %label{ for: 'meeting_season_id' } Season ID
              = number_field_tag :season_id, @phase1_data['season_id'], id: 'meeting_season_id', class: 'form-control form-control-sm', min: 1, step: 1, placeholder: 'e.g. 242'
            .form-group.col-md-3
              %label{ for: 'meeting_header_year' } Header Year
              = text_field_tag :header_year, @phase1_data['header_year'], id: 'meeting_header_year', class: 'form-control form-control-sm', placeholder: 'YYYY/YYYY+1'
            .form-group.col-md-3
              %label{ for: 'meeting_header_date' } Header Date
              = date_field_tag :header_date, @phase1_data['header_date'], id: 'meeting_header_date', class: 'form-control form-control-sm'
            .form-group.col-md-3
              %label{ for: 'meeting_meetingURL' } Meeting URL
              = text_field_tag :meetingURL, @phase1_data['meetingURL'], class: 'form-control form-control-sm', pattern: 'https?://.*', placeholder: 'https://...'

          -# Edition, edition_type, timing_type
          .form-row
            .form-group.col-md-2
              %label{ for: 'meeting_edition' } Edition
              = number_field_tag :edition, @phase1_data['edition'], id: 'meeting_edition', class: 'form-control form-control-sm', placeholder: 'edition #'
            .form-group.col-md-3
              %label{ for: 'meeting_edition_type_id' } Edition Type
              = select_tag :edition_type_id, options_for_select(GogglesDb::EditionType.all.map { |t| [t.long_label, t.id] }, @phase1_data['edition_type_id']), { include_blank: true, id: 'meeting_edition_type_id', class: 'form-control form-control-sm' }
            .form-group.col-md-3
              %label{ for: 'meeting_timing_type_id' } Timing Type
              = select_tag :timing_type_id, options_for_select(GogglesDb::TimingType.all.map { |t| [t.long_label, t.id] }, @phase1_data['timing_type_id']), { include_blank: true, id: 'meeting_timing_type_id', class: 'form-control form-control-sm' }
            .form-group.col-md-2
              .form-check.mt-4
                = check_box_tag :cancelled, '1', @phase1_data['cancelled'].present? && @phase1_data['cancelled'], id: 'meeting_cancelled', class: 'form-check-input'
                %label.form-check-label{ for: 'meeting_cancelled' } Cancelled
            .form-group.col-md-2
              .form-check.mt-4
                = check_box_tag :confirmed, '1', @phase1_data['confirmed'].nil? ? true : @phase1_data['confirmed'], id: 'meeting_confirmed', class: 'form-check-input'
                %label.form-check-label{ for: 'meeting_confirmed' } Confirmed

          -# Max individual events
          .form-row
            .form-group.col-md-3
              %label Max Individual Events
              = number_field_tag :max_individual_events, @phase1_data['max_individual_events'] || 3, class: 'form-control form-control-sm', min: 1
            .form-group.col-md-3
              %label Max Events Per Session
              = number_field_tag :max_individual_events_per_session, @phase1_data['max_individual_events_per_session'] || 3, class: 'form-control form-control-sm', min: 1
            .form-group.col-md-2
              %label Pool Length
              - current_len = @phase1_data['poolLength'].to_s
              - options = [['25m', '25'], ['50m', '50']]
              - options << [current_len, current_len] if current_len.present? && !options.map(&:last).include?(current_len)
              = select_tag :poolLength, options_for_select(options, current_len), class: 'form-control form-control-sm'

          -# Legacy date fields (keep for compatibility)
          %details.mb-3
            %summary.text-muted
              %small Legacy date fields (for LT2 compatibility)
            .form-row.mt-2
              .form-group.col-md-2
                %label Date Day 1
                = number_field_tag :dateDay1, @phase1_data['dateDay1'], class: 'form-control form-control-sm', min: 1, max: 31, step: 1, placeholder: 'DD'
              .form-group.col-md-2
                %label Date Month 1
                = number_field_tag :dateMonth1, @phase1_data['dateMonth1'], class: 'form-control form-control-sm', min: 1, max: 12, step: 1, placeholder: 'MM'
              .form-group.col-md-2
                %label Date Year 1
                = number_field_tag :dateYear1, @phase1_data['dateYear1'], class: 'form-control form-control-sm', min: 1900, max: 2100, step: 1, placeholder: 'YYYY'
              .form-group.col-md-2
                %label Date Day 2
                = number_field_tag :dateDay2, @phase1_data['dateDay2'], class: 'form-control form-control-sm', min: 1, max: 31, step: 1, placeholder: 'DD'
              .form-group.col-md-2
                %label Date Month 2
                = number_field_tag :dateMonth2, @phase1_data['dateMonth2'], class: 'form-control form-control-sm', min: 1, max: 12, step: 1, placeholder: 'MM'
              .form-group.col-md-2
                %label Date Year 2
                = number_field_tag :dateYear2, @phase1_data['dateYear2'], class: 'form-control form-control-sm', min: 1900, max: 2100, step: 1, placeholder: 'YYYY'
            .form-row
              .form-group.col-md-6
                %label Venue
                = text_field_tag :venue1, @phase1_data['venue1'], class: 'form-control form-control-sm', placeholder: 'Venue name'
              .form-group.col-md-6
                %label Address
                = text_field_tag :address1, @phase1_data['address1'], class: 'form-control form-control-sm', placeholder: 'Street, number, ZIP'

          = submit_tag 'Save meeting', class: 'btn btn-sm btn-primary', data: { confirm: 'Save meeting data?' }

        -# Rescan form (separate from meeting form to avoid nesting)
        = form_tag(rescan_phase1_sessions_path, method: :post, class: 'd-inline-block mt-2', onsubmit: "$('#rescan_meeting_id').val($('#meeting_meeting_id').val()); return confirm('Rescan sessions from selected meeting? This will replace current sessions.');") do
          = hidden_field_tag :file_path, @file_path
          = hidden_field_tag :meeting_id, nil, id: 'rescan_meeting_id'
          %button.btn.btn-sm.btn-warning{ type: 'submit' }
            %i.fa.fa-sync
            Rescan sessions from meeting

  .d-flex.justify-content-between.mb-2
    %div
      = link_to 'Use legacy (Step 1)', review_sessions_path(request.query_parameters.except(:phase_v2)), class: 'btn btn-secondary'
    %div
      = link_to 'Proceed to Step 2 (Teams)', review_teams_path(request.query_parameters.merge(phase2_v2: 1)), class: 'btn btn-primary'

  -# Sessions Section
  .card.mt-3
    .card-header.d-flex.justify-content-between.align-items-center
      %span Sessions (Meeting Sessions, Pools & Cities)
      = form_tag(data_fix_add_session_path, method: :post, class: 'd-inline') do
        = hidden_field_tag :file_path, @file_path
        %button.btn.btn-sm.btn-success{ type: 'submit', data: { confirm: 'Add a new session?' } }
          %i.fa.fa-plus
          Add Session
    .card-body
      - sessions = @phase1_data['meeting_session'] || []
      - if sessions.empty?
        .alert.alert-info
          %em No sessions yet. Click "Add Session" above or use the legacy view.
      - else
        - new_session_idx = params[:new_session_index]&.to_i
        - sessions.each_with_index do |sess, idx|
          - is_new_session = new_session_idx.present? && new_session_idx == idx
          .card.mb-3.border-primary{ id: "session-card-#{idx}" }
            .card-header.bg-primary.text-white.d-flex.justify-content-between.align-items-center
              %button.btn.btn-link.text-white.text-left.flex-grow-1{ type: 'button', data: { toggle: 'collapse', target: "#session-collapse-#{idx}" }, 'aria-expanded' => is_new_session ? 'true' : 'false', 'aria-controls' => "session-collapse-#{idx}" }
                %strong
                  Session #{idx + 1}
                  - if sess['scheduled_date'].present?
                    = " (#{sess['scheduled_date']})"
                  - if sess['description'].present?
                    = ": #{sess['description']}"
                %i.fa.fa-chevron-down.ml-2
              = form_tag(data_fix_delete_session_path, method: :delete, class: 'd-inline', onsubmit: "return confirm('Delete this session? This will also clear all downstream data (events, results).');") do
                = hidden_field_tag :file_path, @file_path
                = hidden_field_tag :session_index, idx
                %button.btn.btn-sm.btn-danger{ type: 'submit', 'aria-label' => 'Delete session' }
                  %i.fa.fa-trash
            .collapse{ class: (is_new_session ? 'show' : ''), id: "session-collapse-#{idx}" }
              .card-body
                = form_tag(update_phase1_session_path, method: :patch, data: { controller: 'coded-name', 'coded-name-result-type-value' => 'nick_name', 'coded-name-jwt-value' => current_user.jwt }) do
                  = hidden_field_tag :file_path, @file_path
                  = hidden_field_tag :session_index, idx

                  -# Session Fields
                  %h6.text-primary Session Details
                  .form-row
                    .form-group.col-md-2
                      %label Session ID
                      = number_field_tag 'meeting_session_id', sess['id'], class: 'form-control form-control-sm', placeholder: 'ID'
                    .form-group.col-md-4
                      %label Description
                      = text_field_tag :description, sess['description'], required: true, class: 'form-control form-control-sm', placeholder: 'Session description'
                    .form-group.col-md-2
                      %label Order
                      = number_field_tag :session_order, sess['session_order'] || (idx + 1), required: true, class: 'form-control form-control-sm', min: 1
                    .form-group.col-md-3
                      %label Scheduled Date
                      - if sess['scheduled_date'].blank?
                        %span
                          %i.fa.fa-exclamation.text-danger
                      = date_field_tag :scheduled_date, sess['scheduled_date'], required: true, class: 'form-control form-control-sm'
                    .form-group.col-md-1
                      %label Day Part
                      = select_tag :day_part_type_id, options_for_select(GogglesDb::DayPartType.all.map { |t| [t.long_label, t.id] }, sess['day_part_type_id']), class: 'form-control form-control-sm'

                  %hr.my-3

                  -# Pool Fields with AutoComplete
                  - pool_data = sess['swimming_pool'] || {}
                  - city_data = pool_data['city'] || sess['city'] || {}
                  - pool_id = pool_data['id']
                  - city_id = city_data['id'] || pool_data['city_id']
                  - search_engine = 'https://www.google.com/maps/search/'
                  - initial_query = "?q=#{pool_data['name']}, #{pool_data['address']}".gsub(' ', '%20')
                  - initial_maps_href = "#{search_engine}#{initial_query}"
                  - name_part = "${$('#pool_#{idx}_name').val()}"
                  - addr_part = "${$('#pool_#{idx}_address').val()}"
                  - search_query = "?q=#{name_part}, #{addr_part}, ${$('#city_#{idx}_name').val()}"
                  - onchange_event = "document.querySelector('#maps-uri-search-#{idx}').href = `#{search_engine}#{search_query}`;"

                  %h6.text-secondary Swimming Pool

                  -# City-filtered pool dropdown (when city is selected)
                  - if city_id.present?
                    .form-row.mb-2
                      .form-group.col-md-8
                        %label Existing pools in selected city
                        - pool_collection = GogglesDb::SwimmingPool.where(city_id: city_id)
                        - onclick_copy = "$('#pool_#{idx}_swimming_pool_id').val($('#search_pool_#{idx}').val()); $('#pool_#{idx}_swimming_pool_id').trigger('change');"
                        = select_tag "search_pool_#{idx}", options_for_select(pool_collection.map { |p| [p.name, p.id] }, pool_id), { include_blank: true, class: 'form-control form-control-sm', onclick: onclick_copy }

                  .form-row
                    .form-group.col-md-6
                      = render(AutoCompleteComponent.new(show_top_labels: true, base_dom_id: "pool[#{idx}]", base_api_url: @api_url,
                                                         default_value: pool_id, detail_endpoint: 'swimming_pool', base_name: 'swimming_pool',
                                                         label_column: 'name', search_endpoint: 'swimming_pools', search_column: 'name',
                                                         target3_dom_id: "pool_#{idx}_name", target3_column: 'name',
                                                         target4_dom_id: "pool_#{idx}_nick_name", target4_column: 'nick_name',
                                                         target5_dom_id: "pool_#{idx}_address", target5_column: 'address',
                                                         target6_dom_id: "pool_#{idx}_pool_type_id", target6_column: 'pool_type_id',
                                                         target7_dom_id: "pool_#{idx}_lanes_number", target7_column: 'lanes_number',
                                                         target8_dom_id: "pool_#{idx}_maps_uri", target8_column: 'maps_uri',
                                                         target9_dom_id: "pool_#{idx}_latitude", target9_column: 'latitude',
                                                         target10_dom_id: "pool_#{idx}_longitude", target10_column: 'longitude',
                                                         target11_dom_id: "pool_#{idx}_plus_code", target11_column: 'plus_code',
                                                         target12_dom_id: "city_#{idx}_city_id", target12_column: 'city_id',
                                                         jwt: current_user.jwt))
                      %small.form-text.text-muted Search by ID or Pool name
                    .form-group.col-md-4
                      %label{ for: "pool_#{idx}_name" } Pool Name
                      = text_field_tag "pool[name]", pool_data['name'], id: "pool_#{idx}_name", required: true, class: 'form-control form-control-sm', placeholder: 'Pool name', onchange: onchange_event, data: { 'coded-name-target' => 'name' }
                    .form-group.col-md-2
                      %label{ for: "pool_#{idx}_nick_name" } Nick Name
                      = text_field_tag "pool[nick_name]", pool_data['nick_name'], id: "pool_#{idx}_nick_name", class: 'form-control form-control-sm', placeholder: 'Coded', data: { 'coded-name-target' => 'field' }

                  .form-row
                    .form-group.col-md-5
                      %label Address
                      = text_field_tag('pool[address]', pool_data['address'],
                                       id: "pool_#{idx}_address", class: 'form-control form-control-sm',
                                       placeholder: 'Street address', onchange: onchange_event)
                    .form-group.col-md-2
                      %label Pool Type
                      - pool_type_opts = options_for_select(GogglesDb::PoolType.all.map { |t| [t.long_label, t.id] },
                                                            pool_data['pool_type_id'])
                      = select_tag('pool[pool_type_id]', pool_type_opts,
                                   { id: "pool_#{idx}_pool_type_id", class: 'form-control form-control-sm',
                                     data: { 'autocomplete-target' => 'field2', 'coded-name-target' => 'pool' } })
                    .form-group.col-md-1
                      %label Lanes
                      = number_field_tag("pool[lanes_number]", pool_data['lanes_number'],
                                         id: "pool_#{idx}_lanes_number", class: 'form-control form-control-sm', min: 1, max: 10)
                    .form-group.col-md-4
                      %label
                        Maps URI
                        %a.btn.btn-sm.btn-outline-primary{ id: "maps-uri-search-#{idx}", href: initial_maps_href,
                                                           target: '_blank', data: { toggle: 'tooltip', title: 'Search on Google Maps' } }
                          %i.fa.fa-search
                          Search Maps
                      = text_field_tag("pool[maps_uri]", pool_data['maps_uri'], id: "pool_#{idx}_maps_uri",
                                       class: 'form-control form-control-sm', placeholder: 'Google Maps URI')

                  .form-row
                    .form-group.col-md-2
                      %label Plus Code
                      = text_field_tag("pool[plus_code]", pool_data['plus_code'], id: "pool_#{idx}_plus_code", class: 'form-control form-control-sm', placeholder: '+ code')
                    .form-group.col-md-2
                      %label Latitude
                      = text_field_tag("pool[latitude]", pool_data['latitude'], id: "pool_#{idx}_latitude", class: 'form-control form-control-sm', placeholder: 'lat')
                    .form-group.col-md-2
                      %label Longitude
                      = text_field_tag("pool[longitude]", pool_data['longitude'], id: "pool_#{idx}_longitude", class: 'form-control form-control-sm', placeholder: 'lng')

                  %hr.my-3

                  -# City Fields with AutoComplete
                  %h6.text-info City
                  .form-row
                    .form-group.col-md-5
                      = render(AutoCompleteComponent.new(show_top_labels: true, base_dom_id: "city[#{idx}]", base_api_url: @api_url, default_value: city_id, detail_endpoint: 'city', base_name: 'city', label_column: 'area', search_endpoint: 'cities', search_column: 'name', target3_dom_id: "city_#{idx}_name", target3_column: 'name', target4_dom_id: "city_#{idx}_area", target4_column: 'area', target5_dom_id: "city_#{idx}_zip", target5_column: 'zip', target6_dom_id: "city_#{idx}_country", target6_column: 'country', target7_dom_id: "city_#{idx}_country_code", target7_column: 'country_code', target8_dom_id: "city_#{idx}_latitude", target8_column: 'latitude', target9_dom_id: "city_#{idx}_longitude", target9_column: 'longitude', jwt: current_user.jwt))
                      %small.form-text.text-muted Search by ID or City name
                    .form-group.col-md-3
                      %label City Name
                      = text_field_tag "city[name]", city_data['name'], id: "city_#{idx}_name", class: 'form-control form-control-sm', placeholder: 'City name', onchange: onchange_event, data: { 'coded-name-target' => 'city' }
                    .form-group.col-md-2
                      %label Area
                      = text_field_tag "city[area]", city_data['area'], id: "city_#{idx}_area", class: 'form-control form-control-sm', placeholder: 'Province/State'
                    .form-group.col-md-2
                      %label ZIP
                      = text_field_tag "city[zip]", city_data['zip'], id: "city_#{idx}_zip", class: 'form-control form-control-sm', placeholder: 'ZIP'

                  .form-row
                    .form-group.col-md-3
                      %label Country
                      = text_field_tag "city[country]", city_data['country'], id: "city_#{idx}_country", class: 'form-control form-control-sm', placeholder: 'Country'
                    .form-group.col-md-1
                      %label Code
                      = text_field_tag "city[country_code]", city_data['country_code'], id: "city_#{idx}_country_code", class: 'form-control form-control-sm', placeholder: 'IT'
                    .form-group.col-md-2
                      %label Latitude
                      = text_field_tag "city[latitude]", city_data['latitude'], id: "city_#{idx}_latitude", class: 'form-control form-control-sm', placeholder: 'lat'
                    .form-group.col-md-2
                      %label Longitude
                      = text_field_tag "city[longitude]", city_data['longitude'], id: "city_#{idx}_longitude", class: 'form-control form-control-sm', placeholder: 'lng'

                  = submit_tag 'Save Session', class: 'btn btn-primary', data: { confirm: 'Save this session data?' }
