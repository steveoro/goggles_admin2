-# frozen_string_literal: true

-# Phase 3 Swimmers view with collapsible cards + AutoComplete + fuzzy matching

.container-fluid
  %h2 Data-Fix V2 • Step 3: Swimmers (Phase 3)
  .mb-2
    = render(partial: 'data_fix/step_tabs', locals: { active_step: 3, file_path: @file_path })
  -# Phase Metadata card
  = render(partial: 'data_fix/phase_metadata', locals: { phase_number: 3, metadata: @phase3_meta })

  -# Phase Navigation buttons
  .d-flex.justify-content-between.my-2
    %div
      = link_to 'Use legacy (Step 3)', review_swimmers_path(request.query_parameters.except(:phase3_v2)), class: 'btn btn-secondary btn-block'
    %div
      = link_to 'Proceed to Step 4 (Events)', review_events_path(request.query_parameters), class: 'btn btn-primary btn-block'

  -# Search and filter controls
  .card.mb-2
    .card-header
      = form_tag(review_swimmers_path, method: :get, class: 'form-inline') do
        = hidden_field_tag :file_path, @file_path
        = hidden_field_tag :phase3_v2, 1
        .form-group.mr-2
          %label.mr-1{ for: 'q' } Filter
          = text_field_tag :q, @q, class: 'form-control form-control-sm', placeholder: 'Search name...'
        .form-group.mr-2
          %label.mr-1{ for: 'swimmers_per_page' } Per page
          = select_tag :swimmers_per_page, options_for_select([50, 100, 150], @per_page), class: 'form-control form-control-sm'
        = submit_tag 'Apply', class: 'btn btn-sm btn-primary mr-1'
        = link_to 'Clear', review_swimmers_path(file_path: @file_path, phase3_v2: 1), class: 'btn btn-sm btn-light'
    .card-body.py-0
      -# Pagination controls (top) and Add button
      .d-flex.justify-content-between.align-items-center
        %div
          %strong Page:
          = @page
          = "/"
          = @total_pages
          &nbsp;•&nbsp;
          %strong Rows:
          = @row_range
          = "/"
          = @total_count
        .flex-grow-1.pt-3
          - if @items.present?
            = render(PageLinksForArrayComponent.new(data: @items, total_count: @total_count,
                                                    page: @page, per_page: @per_page, param_name: :swimmers_page))
        %div
          = form_tag(data_fix_add_swimmer_path, method: :post, class: 'd-inline', onsubmit: "return confirm('Add a new blank swimmer?');") do
            = hidden_field_tag :file_path, @file_path
            %button.btn.btn-sm.btn-success{ type: 'submit' }
              %i.fa.fa-plus
              Add Swimmer
  
  -# Swimmers as collapsible cards
  - if @items.empty?
    .alert.alert-info
      %em No swimmers found. Adjust filters or rescan to rebuild phase3 file.
  - else
    - @items.each_with_index do |swimmer, idx|
      - swimmer_index = ((@page - 1) * @per_page) + idx
      - swimmer_id = swimmer['swimmer_id']
      - has_match = swimmer_id.present?
      - card_bg = has_match ? 'bg-light' : 'bg-light-yellow'
      - border_color = has_match ? 'border-secondary' : 'border-warning'
      - border_width = 'border-2'
      
      .card.mb-2{ class: "#{card_bg} #{border_color} #{border_width}", id: "swimmer-card-#{swimmer_index}" }
        .card-header.d-flex.justify-content-between.align-items-center{ id: "swimmer-header-#{swimmer_index}", style: 'cursor: pointer;', data: { toggle: 'collapse', target: "#swimmer-panel-#{swimmer_index}" } }
          .d-flex.align-items-center
            %span.mr-2
              - if has_match
                %i.fa.fa-check-circle.text-success{ title: 'Matched' }
              - else
                %i.fa.fa-plus-circle.text-warning{ title: 'New/Unmatched' }
            %strong
              = swimmer['complete_name']
            %small.ml-2.text-muted
              (#{swimmer['year_of_birth']}, #{swimmer['gender_type_code']})
            - if has_match
              %small.ml-2.badge.badge-success
                ID: #{swimmer_id}
            - else
              %small.ml-2.badge.badge-primary
                NEW
          .d-flex.align-items-center
            = form_tag(data_fix_delete_swimmer_path, method: :delete, class: 'd-inline', onsubmit: "return confirm('Delete swimmer #{swimmer['complete_name']}?');") do
              = hidden_field_tag :file_path, @file_path
              = hidden_field_tag :swimmer_index, swimmer_index
              %button.btn.btn-sm.btn-danger{ type: 'submit', 'aria-label' => 'Delete swimmer', onclick: 'event.stopPropagation();' }
                %i.fa.fa-trash

        .collapse{ id: "swimmer-panel-#{swimmer_index}", 'aria-labelledby' => "swimmer-header-#{swimmer_index}", 'data-parent' => "#swimmer-card-#{swimmer_index}" }
          .card-body.border-bottom.border-secondary
            = form_tag(update_phase3_swimmer_path, method: :patch) do
              = hidden_field_tag :file_path, @file_path
              = hidden_field_tag :swimmer_index, swimmer_index
              
              .container-fluid
                -# Row 0: Fuzzy matches dropdown (quick selection)
                - fuzzy_matches = swimmer['fuzzy_matches'] || []
                - if fuzzy_matches.present?
                  .row
                    .col-12
                      .form-group
                        = label_tag "fuzzy_select_#{swimmer_index}", 'Quick match selection (fuzzy matches)'
                        = select_tag "fuzzy_select_#{swimmer_index}", options_for_select([['-- Select a match --', '']] + fuzzy_matches.map { |m| [m['display_label'], m['id']] }, swimmer_id), class: 'form-control', id: "fuzzy_select_#{swimmer_index}", onchange: "var swimmerId = this.value; if (swimmerId) { $('#swimmer_#{swimmer_index}_swimmer_id').val(swimmerId).trigger('change'); }"
                        %small.form-text.text-muted
                          Select a match from the list to quickly populate swimmer fields via AutoComplete.

                -# Row 1: Swimmer AutoComplete + complete_name
                .row
                  .col
                    = render(AutoCompleteComponent.new(show_top_labels: true,
                                                       base_dom_id: "swimmer[#{swimmer_index}]", base_api_url: @api_url,
                                                       default_value: swimmer_id,
                                                       detail_endpoint: 'swimmer', base_name: 'swimmer', label_column: 'complete_name',
                                                       search_endpoint: 'swimmers', search_column: 'complete_name',
                                                       search2_dom_id: "swimmer_#{swimmer_index}_year_of_birth", search2_column: 'year_of_birth',
                                                       target3_dom_id: "swimmer_#{swimmer_index}_gender_type_code", target3_column: 'gender_code',
                                                       target4_dom_id: "swimmer_#{swimmer_index}_last_name", target4_column: 'last_name',
                                                       target5_dom_id: "swimmer_#{swimmer_index}_first_name", target5_column: 'first_name',
                                                       target6_dom_id: "swimmer_#{swimmer_index}_complete_name", target6_column: 'complete_name',
                                                       jwt: current_user.jwt))
                  .col-md-7
                    .form-group
                      %label Complete Name
                      = text_field_tag('swimmer[complete_name]', swimmer['complete_name'],
                                       class: 'form-control', id: "swimmer_#{swimmer_index}_complete_name")
                -# Row 2: Last Name + First Name + Year of Birth + Gender
                .row
                  .col-md-4
                    .form-group
                      %label Last Name
                      = text_field_tag('swimmer[last_name]', swimmer['last_name'],
                                       class: 'form-control', id: "swimmer_#{swimmer_index}_last_name")
                  .col-md-4
                    .form-group
                      %label First Name
                      = text_field_tag('swimmer[first_name]', swimmer['first_name'],
                                       class: 'form-control', id: "swimmer_#{swimmer_index}_first_name")
                  .col-md-2
                    .form-group
                      %label Year of Birth
                      = number_field_tag('swimmer[year_of_birth]', swimmer['year_of_birth'],
                                         class: 'form-control', id: "swimmer_#{swimmer_index}_year_of_birth")
                  .col-md-2
                    .form-group
                      %label Gender Type Code
                      = select_tag('swimmer[gender_type_code]', options_for_select([['M', 'M'], ['F', 'F']],
                                   swimmer['gender_type_code']),
                                   include_blank: true, class: 'form-control', id: "swimmer_#{swimmer_index}_gender_type_code")
                -# Submit button
                .row
                  .col-12
                    = submit_tag('Save Swimmer', class: 'btn btn-primary')

  -# Pagination controls (bottom)
  .mt-3
    - if @items.present?
      = render(PageLinksForArrayComponent.new(data: @items, total_count: @total_count,
                                              page: @page, per_page: @per_page, param_name: :swimmers_page))
