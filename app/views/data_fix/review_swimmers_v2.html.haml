-# frozen_string_literal: true

-# Phase 3 Swimmers view with collapsible cards + AutoComplete + fuzzy matching
.container-fluid
  %h2 Data-Fix V2 • Step 3: Swimmers (Phase 3)
  .mb-2
    = render(partial: 'data_fix/step_tabs', locals: { active_step: 3, file_path: @file_path })

  -# Phase Navigation buttons
  .d-flex.justify-content-between.my-2
    %div
      = link_to 'Use legacy (Step 3)', review_swimmers_path(request.query_parameters.except(:phase3_v2)), class: 'btn btn-secondary btn-block'
    %div
      = link_to 'Proceed to Step 4 (Events)', review_events_path(request.query_parameters), class: 'btn btn-primary btn-block'
  -# Phase Metadata card
  = render(partial: 'data_fix/phase_metadata', locals: { phase_number: 3, metadata: @phase3_meta })

  -# Search and filter controls
  .card.my-2
    .card-header
      = form_tag(review_swimmers_path, method: :get, class: 'form-inline') do
        = hidden_field_tag :file_path, @file_path
        = hidden_field_tag :phase3_v2, 1
        .form-group.mr-2
          %label.mr-1{ for: 'q' } Filter
          = text_field_tag :q, @q, class: 'form-control form-control-sm', placeholder: 'Search name...'
        .form-group.mr-2
          %label.mr-1{ for: 'swimmers_per_page' } Per page
          = select_tag :swimmers_per_page, options_for_select([50, 100, 150], @per_page), class: 'form-control form-control-sm'
        = submit_tag 'Apply', class: 'btn btn-sm btn-primary mr-1'
        = link_to 'Clear', review_swimmers_path(file_path: @file_path, phase3_v2: 1), class: 'btn btn-sm btn-light'
    .card-body.py-0
      -# Pagination controls (top) and Add button
      .d-flex.justify-content-between.align-items-center
        %div
          %strong Page:
          = @page
          = "/"
          = @total_pages
          &nbsp;•&nbsp;
          %strong Rows:
          = @row_range
          = "/"
          = @total_count
        .flex-grow-1.pt-3
          - if @items.present?
            = render(PageLinksForArrayComponent.new(data: @items, total_count: @total_count,
                                                    page: @page, per_page: @per_page, param_name: :swimmers_page))
        %div
          = form_tag(data_fix_add_swimmer_path, method: :post, class: 'd-inline', onsubmit: "return confirm('Add a new blank swimmer?');") do
            = hidden_field_tag :file_path, @file_path
            %button.btn.btn-sm.btn-success{ type: 'submit' }
              %i.fa.fa-plus
              Add Swimmer

  -# Swimmers as collapsible cards
  - if @items.empty?
    .alert.alert-info
      %em No swimmers found. Adjust filters or rescan to rebuild phase3 file.
  - else
    - @items.each_with_index do |swimmer_hash, idx|
      :ruby
        swimmer_index = ((@page - 1) * @per_page) + idx
        swimmer_id = swimmer_hash['swimmer_id']
        has_match = swimmer_id.present?
        card_bg = has_match ? 'bg-light' : 'bg-light-yellow'
        border_color = has_match ? 'border-secondary' : 'border-warning'
        border_width = 'border-2'

      = render(partial: 'swimmer_form_card',
               locals: { file_path: @file_path, api_url: @api_url, swimmer_hash:, swimmer_index:,
                         swimmer_id:, has_match:, card_bg:, border_color:, border_width: })

  -# Pagination controls (bottom)
  .mt-3
    - if @items.present?
      = render(PageLinksForArrayComponent.new(data: @items, total_count: @total_count,
                                              page: @page, per_page: @per_page, param_name: :swimmers_page))
