# frozen_string_literal: true

require 'rails_helper'

RSpec.describe 'ImportQueues', type: :request do
  describe 'GET /index' do
    context 'for an unlogged user' do
      it 'is a redirect to the login path' do
        get(import_queues_path)
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context 'for a logged-in user' do
      include AdminSignInHelpers
      before(:each) do
        admin_user = prepare_admin_user
        expect(admin_user).to be_a(GogglesDb::User).and be_valid
        sign_in_admin(admin_user)
        # API double:
        allow(APIProxy).to receive(:call)
          .with(method: :get, url: 'import_queues', jwt: admin_user.jwt)
          .and_return(DummyResponse.new(body: GogglesDb::ImportQueue.all.to_json))
      end

      it 'returns http success' do
        get(import_queues_path)
        expect(response).to have_http_status(:success)
      end
    end
  end
  #-- -------------------------------------------------------------------------
  #++

  describe 'POST /update' do
    let(:fixture_row) { FactoryBot.create(:import_queue) }
    let(:new_value) { 'FAKE UPDATE' }

    context 'for an unlogged user' do
      it 'is a redirect to the login path' do
        post(import_queues_update_path(id: fixture_row.id), params: { route: new_value })
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context 'for a logged-in user' do
      include AdminSignInHelpers
      before(:each) do
        admin_user = prepare_admin_user
        expect(admin_user).to be_a(GogglesDb::User).and be_valid
        sign_in_admin(admin_user)
        # API double:
        allow(APIProxy).to receive(:call)
          .with(method: :get, url: 'import_queue', jwt: admin_user.jwt, payload: )
          .and_return(DummyResponse.new(body: GogglesDb::ImportQueue.all.to_json))
        post(
          import_queues_update_path(id: fixture_row.id),
          params: { route: new_value }
        )
      end

      it 'sets the flash success message' do
        expect(flash[:info]).to eq(I18n.t('datagrid.edit_modal.edit_ok'))
      end
      it 'does NOT set the flash error message' do
        expect(flash[:error]).to be nil
      end
      it 'redirects to /index' do
        expect(response).to redirect_to(import_queues_path)
      end
    end
  end
  #-- -------------------------------------------------------------------------
  #++

  describe 'POST /create' do
    let(:new_value) { 'IGNORED' }

    context 'for an unlogged user' do
      it 'is a redirect to the login path' do
        post(import_queues_create_path, params: { route: new_value })
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context 'for a logged-in user' do
      include AdminSignInHelpers
      before(:each) do
        sign_in_admin(prepare_admin_user)
        post(import_queues_create_path, params: { route: new_value })
      end

      it 'sets the flash success message' do
        expect(flash[:info]).to be_present
        # (Can't really say which ID will be randomly generated by the WebMock)
      end
      it 'does NOT set the flash error message' do
        expect(flash[:error]).to be nil
      end
      it 'redirects to /index' do
        expect(response).to redirect_to(import_queues_path)
      end
    end
  end
  #-- -------------------------------------------------------------------------
  #++

  describe 'DELETE /destroy' do
    let(:fixture_row) { FactoryBot.create(:import_queue) }

    context 'for an unlogged user' do
      it 'is a redirect to the login path' do
        delete(import_queues_destroy(id: fixture_row.id))
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context 'for a logged-in user' do
      include AdminSignInHelpers
      before(:each) do
        sign_in_admin(prepare_admin_user)
        delete(import_queues_destroy(id: fixture_row.id))
      end

      it 'sets the flash success message' do
        expect(flash[:info]).to eq(I18n.t('dashboard.grid_commands.delete_ok', tot: 1, ids: [fixture_row.id].to_s))
      end
      it 'does NOT set the flash error message' do
        expect(flash[:error]).to be nil
      end
      it 'redirects to /index' do
        expect(response).to redirect_to(import_queues_path)
      end
    end
  end
  #-- -------------------------------------------------------------------------
  #++
end
